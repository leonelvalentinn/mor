---
import ResponsiveToggle from './ResponsiveToggle.astro'
import { DarkMode } from 'accessible-astro-components'
import { Image } from "astro:assets"
import logo from "../assets/img/Logo-mor.webp"
import logoblanco from "../assets/img/logo-blanco.png"
---

<div id="main-navigation" class="is-desktop py-8">
  <div class="container">
    <a href="/" class="flex items-center gap-2 !no-underline">
      <Image src={logoblanco} alt="Mor Logo" width="250" height="50" />
    </a>
    <div class="wrapper">
      <nav class="desktop-menu" aria-label="Main navigation desktop">
        <ul class="menu">
          <slot />
        </ul>
      </nav>
      <!--<DarkMode />-->
      <ResponsiveToggle />
    </div>
    <nav class="mobile-menu" aria-label="Main navigation mobile" id="mobile-menu">
      <ul class="menu">
        <slot />
      </ul>
    </nav>
  </div>
</div>

<script>
  // variables
  const mainNav = document.querySelector('#main-navigation')
  const mainMenu = mainNav.querySelector('ul')
  const dropdownMenus = [...document.querySelectorAll('.has-dropdown button')]

  // functions
  const setActiveMenuItem = () => {
    const mobileDesktopMenus = mainNav.querySelectorAll('nav > ul')
    const currenPathname = window.location.pathname

    mobileDesktopMenus.forEach((menu) => {
      const menuItems = [...menu.querySelectorAll('a:not([rel*="external"])')] as HTMLAnchorElement[]

      menuItems.forEach((menuItem) => {
        if (currenPathname.includes(menuItem.pathname.replaceAll('/', '')) && menuItem.textContent !== 'Home') {
          menuItem.classList.add('is-active')
          menuItem.setAttribute('aria-current', 'page')
        } else if (menuItem.textContent === 'Home' && currenPathname === '/') {
          menuItem.classList.add('is-active')
          menuItem.setAttribute('aria-current', 'page')
        }
      })
    })
  }

  const checkMenuSize = () => {
    const mainNavWidth = mainNav.getBoundingClientRect().width
    const desktopMenuWidth = document.querySelector('.desktop-menu').getBoundingClientRect().width
    const logoWidthBuffer = 300
    const totalMenuWidth = Math.round(desktopMenuWidth) + logoWidthBuffer

    if (totalMenuWidth >= mainNavWidth) {
      mainNav.classList.remove('is-desktop')
      mainNav.classList.add('is-mobile')
    } else if (totalMenuWidth <= mainNavWidth) {
      mainNav.classList.add('is-desktop')
      mainNav.classList.remove('is-mobile')
    }
  }

  const isOutOfViewport = (element) => {
    const elementBounds = element.getBoundingClientRect()
    return elementBounds.right > (window.innerWidth || document.documentElement.clientWidth)
  }


  setActiveMenuItem()
  checkMenuSize()

  window.addEventListener('resize', checkMenuSize)
</script>

<style lang="scss" is:global>
  @use '../assets/scss/base/breakpoint' as *;
  @use '../assets/scss/base/outline' as *;

  @keyframes show {
    0% {
      display: block;
      width: 0;
    }
    50% {
      display: block;
      width: 50%;
    }
    100% {
      display: block;
      width: 100%;
    }
  }
  
  #main-navigation {
    > .container {
      display: flex;
      justify-content: space-between;
      flex-wrap: wrap;
    }

    &.is-desktop {
      .desktop-menu {
        visibility: visible;
        position: static;
      }

      .mobile-menu {
        display: none;
      }

      .darkmode-toggle {
        margin-top: -6px;
      }
    }

    &.is-mobile {
      flex-direction: column;

      .mobile-menu {

        &.show {
        }
      }

      .desktop-menu {
        visibility: hidden;
        z-index: -99;
        position: absolute;
        left: 0;
      }

      .responsive-toggle {
        display: block;
      }
    }

    .wrapper {
      display: flex;
      align-items: center;
      gap: 1rem;
    }

    nav {
      > ul {
        display: flex;
        gap: 1.5rem;
        list-style-type: none;

        a,
        button {
          text-decoration: none;
          font-size: 1.125rem;
          line-height: 1.6875rem;
          transition: color 0.15s ease-in-out;
        }

        a:hover,
        a:focus,
        .is-active,
        .has-dropdown > button:hover,
        .has-dropdown > button:focus {
          text-decoration: underline;
          text-decoration-thickness: 1px;
          text-decoration-style: wavy;
          text-underline-offset: 7px;
        }

        .is-active {
          font-weight: bold;
        }
      }
    }

    .mobile-menu {
      flex-basis: 100%;
      padding: 2rem 0;

      > ul {
        flex-direction: column;

        ul {
          position: relative;
          margin-top: 1rem;
        }
      }

      a,
      button {
        display: block;
        width: 100%;
        padding: 0.5rem 0;
      }
    }

    .has-dropdown {
      position: relative;

      > button {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0;
        margin-top: -1px;
        border: none;
        color: var(--action-color);

        &:hover {
          color: var(--action-color-state);

          &::after {
            border-color: var(--action-color-state);
          }
        }

        &::after {
          content: '';
          width: 0.85rem;
          height: 0.75em;
          margin-top: -0.25rem;
          border-style: solid;
          border-width: 0.2em 0.2em 0 0;
          border-color: var(--action-color);
          transform: rotate(135deg);
        }

        &.show {
          &::after {
            margin-top: 0.25rem;
            transform: rotate(-45deg);
          }

          ~ ul {
            display: flex;
            flex-direction: column;
            gap: 1rem;
          }
        }
      }

      ul {
        display: none;
        position: absolute;
        z-index: 100;
        min-width: 260px;
        top: 125%;
        right: 0;
        bottom: auto;
        left: 0;
        padding: 1rem;
        background-color: var(--neutral-background);
        border: 2px solid black;
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.15);
      }
    }
  }

  .darkmode-toggle {
    padding: 0;
    border: none;

    svg {
      width: 30px;
      margin-top: 4px;
    }

    svg path {
      fill: var(--action-color);
      transition: fill 0.2s ease-in-out;
    }

    &:hover {
      svg path {
        fill: var(--action-color-state);
      }
    }

    &:focus {
      @include outline;

      &:not(:focus-visible) {
        outline: none;
        box-shadow: none;
      }
    }
  }
  .slide-down {
	-webkit-animation: slide-down 0.7s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
	        animation: slide-down 0.7s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
  }
  @-webkit-keyframes slide-top {
  0% {
    display: block;
    -webkit-transform: translateX(-100vw);
            transform: translateX(-100vw);
  }
  100% {
    display: block;
    -webkit-transform: translateX(0);
            transform: translateX(0);
  }
}
@keyframes slide-top {
  0% {
    display: block !important;
    -webkit-transform: translateX(-100vw);
            transform: translateX(-100vw);
  }
  100% {
    display: block !important;
    -webkit-transform: translateX(0);
            transform: translateX(0);
  }
}
@-webkit-keyframes slide-down {
  0% {
    display: block;
    -webkit-transform: translateY(0);
            transform: translateY(0);
  }
  100% {
    display: block;
    -webkit-transform: translateY(-100vh);
            transform: translateY(-100vh);
  }
}
@keyframes slide-down {
  0% {
    display: block !important;
    -webkit-transform: translateX(0);
            transform: translateX(0);
  }
  100% {
    display: block;
    -webkit-transform: translateX(-100vh);
            transform: translateX(-100vh);
  }
}
.mobile-menu {
  -webkit-animation: slide-down 0.7s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
	        animation: slide-down 0.7s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
          display: none;
}
.show {
  -webkit-animation: slide-top 0.7s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
	        animation: slide-top 0.7s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
          display: block;
}
</style>
